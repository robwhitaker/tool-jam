{
    "style": "johan-tibell",
    "extensions": [
        "AllowAmbiguousTypes",
        "BangPatterns",
        "ConstraintKinds",
        "DataKinds",
        "DeriveAnyClass",
        "DeriveFoldable",
        "DeriveFunctor",
        "DeriveGeneric",
        "DeriveLift",
        "DeriveTraversable",
        "DerivingStrategies",
        "DoAndIfThenElse",
        "EmptyCase",
        "EmptyDataDecls",
        "ExistentialQuantification",
        "FlexibleContexts",
        "FlexibleInstances",
        "FunctionalDependencies",
        "GADTs",
        "GeneralizedNewtypeDeriving",
        "KindSignatures",
        "LambdaCase",
        "MultiParamTypeClasses",
        "MultiWayIf",
        "NamedFieldPuns",
        "NamedWildCards",
        "NumericUnderscores",
        "OverloadedStrings",
        "RankNTypes",
        "ScopedTypeVariables",
        "StandaloneDeriving",
        "TupleSections",
        "TypeApplications",
        "TypeFamilies",
        "TypeOperators",
        "ViewPatterns"
    ],
    "fixities": [],
    "formatting": {
        "op": {
            ",": {
                "force-linebreak": false,
                "spaces": "after",
                "linebreaks": "before"
            },
            "=": {
                "force-linebreak": false,
                "spaces": "both",
                "linebreaks": "after"
            },
            "= in declaration": {
                "force-linebreak": false,
                "spaces": "both",
                "linebreaks": "after"
            },
            "-> in expression": {
                "force-linebreak": false,
                "spaces": "both",
                "linebreaks": "after"
            },
            "<- in expression": {
                "force-linebreak": false,
                "spaces": "both",
                "linebreaks": "before"
            },
            "default": {
                "force-linebreak": false,
                "spaces": "both",
                "linebreaks": "before"
            },
            ". in type": {
                "force-linebreak": false,
                "spaces": "after",
                "linebreaks": "after"
            },
            "..": {
                "force-linebreak": false,
                "spaces": "none",
                "linebreaks": "none"
            },
            ", in other": {
                "force-linebreak": false,
                "spaces": "after",
                "linebreaks": "before"
            },
            "record in pattern": {
                "force-linebreak": false,
                "spaces": "after",
                "linebreaks": "after"
            },
            "record": {
                "force-linebreak": true,
                "spaces": "after",
                "linebreaks": "after"
            },
            ": in pattern": {
                "force-linebreak": false,
                "spaces": "none",
                "linebreaks": "before"
            },
            ", in pattern": {
                "force-linebreak": false,
                "spaces": "after",
                "linebreaks": "none"
            },
            ":: in declaration": {
                "force-linebreak": false,
                "spaces": "both",
                "linebreaks": "before"
            }
        },
        "group": {
            "{ in pattern": {
                "force-linebreak": false,
                "spaces": "none",
                "linebreaks": "none"
            },
            "[": {
                "force-linebreak": false,
                "spaces": "none",
                "linebreaks": "after"
            },
            "default": {
                "force-linebreak": false,
                "spaces": "none",
                "linebreaks": "none"
            },
            "{": {
                "force-linebreak": false,
                "spaces": "both",
                "linebreaks": "after"
            },
            "{ in expression": {
                "force-linebreak": true,
                "spaces": "both",
                "linebreaks": "none"
            },
            "( in other": {
                "force-linebreak": false,
                "spaces": "both",
                "linebreaks": "before"
            },
            "( in pattern": {
                "force-linebreak": false,
                "spaces": "none",
                "linebreaks": "none"
            },
            "( in type": {
                "force-linebreak": false,
                "spaces": "none",
                "linebreaks": "after"
            }
        },
        "layout": {
            "infix-app": "try-oneline",
            "if": "vertical",
            "import-spec-list": "flex",
            "con-decls": "vertical",
            "declaration": "try-oneline",
            "app": "try-oneline",
            "let": "vertical",
            "record": "vertical",
            "type": "try-oneline",
            "export-spec-list": "try-oneline",
            "list-comp": "flex"
        },
        "penalty": {
            "overfull": 10,
            "indent": 1,
            "overfull-once": 200,
            "max-line-length": 88,
            "linebreak": 30
        },
        "indent": {
            "deriving": 2,
            "if": "align",
            "let-binds": "align",
            "import-spec-list": "align",
            "onside": 4,
            "where": 2,
            "typesig": "align",
            "do": "indent-by 4",
            "app": "indent-by 4",
            "case": "indent-by 4",
            "let-in": "align",
            "where-binds": "indent-by 2",
            "let": "align",
            "export-spec-list": "indent-by 2",
            "multi-if": "align",
            "class": "indent-by 4"
        },
        "align": {
            "let-binds": false,
            "where": false,
            "matches": false,
            "limits": [
                40,
                25
            ],
            "case": true,
            "import-module": true,
            "import-spec": true,
            "class": false,
            "record-fields": true
        },
        "options": {
            "sort-pragmas": false,
            "flexible-oneline": true,
            "decl-no-blank-lines": [],
            "split-language-pragmas": false,
            "align-sum-type-decl": true,
            "sort-import-lists": true,
            "preserve-vertical-space": true,
            "sort-imports": [
                {
                    "prefixes": ["System"],
                    "order": "sorted"
                },
                {
                    "prefixes": ["Control"],
                    "order": "sorted"
                },
                {
                    "prefixes": ["Data"],
                    "order": "grouped"
                },
                {
                    "prefixes": [""],
                    "order": "grouped"
                },
                {
                    "prefixes": ["Debug"],
                    "order": "sorted"
                }
            ]
        }
    },
    "language": "Haskell2010"
}
